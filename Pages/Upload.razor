@using System.Collections.Generic
@using System.Threading
@using System.ComponentModel.DataAnnotations
@page "/upload"

<h1>Upload</h1>

AutoUpload : <input type="checkbox" @ref="efAutoUpload" @onchange="OnAutoUploadChange" disabled="@isUploading">
<div class="drag-drop-zone">
    <p>Drag & Drop file here</p>
    <InputFile multiple OnChange="HandleSelection" style="@(isUploading ? "display:none;" : "")"></InputFile>
</div>

@if(allFiles != null)
{
    foreach(var file in allFiles)
    {
        <div class="border border-secondary p-3">
            <p>Name: @file.Name</p>
            <p>Size in bytes: @file.Size</p>
            <p>Last modified date: @file.LastModified.ToShortDateString()</p>
            <p>Content type: @file.Type</p>
            <button @onclick="@(e => DeleteFile(file))" disabled="@isUploading">Delete</button>
        </div>
    }

    @if (isUploading)
    {
        <p>@status</p>
    }
    <hr>
    <button @onclick="@SubmitUpload" disabled="@isUploading" style="@(isAutoUpload ? "display:none;" : "")">Upload</button>
}


@code {
    IFileListEntry[] allFiles;
    string status = "";
    bool isUploading = false;
    bool isAutoUpload = false;
    ElementReference efAutoUpload;

    void DeleteFile(IFileListEntry file)
    {
        if(allFiles != null && allFiles.Length > 0)
        {
            List<IFileListEntry> listFiles = new List<IFileListEntry>();
            listFiles.AddRange(allFiles);
            listFiles.Remove(file);

            allFiles = listFiles.ToArray();
        }

        StateHasChanged();
    }

    void OnAutoUploadChange(ChangeEventArgs e)
    {
        isAutoUpload = (bool)e.Value;
        allFiles = null;
        StateHasChanged();
    }
    
    async Task HandleSelection(IFileListEntry[] files)
    {
        allFiles = files;
        StateHasChanged();

        if (isAutoUpload)
        {
            await SubmitUpload();
        }
    }

    async Task SubmitUpload()
    {
        if (allFiles != null)
        {
            isUploading = true;

            foreach(var file in allFiles.ToArray())
            {
                using(var fileStream = File.Create("data.tmp"))
                {
                    await file.Data.CopyToAsyncWithCallback(fileStream, x => {
                        status = $"Progresss {x}/{file.Size} bytes from {file.Name}";
                        StateHasChanged();
                    });
                }

                File.Delete("data.tmp");

                status = $"Finished loading {file.Size} bytes from {file.Name}";
                DeleteFile(file);
            }
        }

        isUploading = false;
        allFiles = null;
        StateHasChanged();
    }
}