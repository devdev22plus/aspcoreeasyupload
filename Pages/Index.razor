@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.Extensions.Configuration
@using Microsoft.JSInterop
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IFileReaderService fileReaderService;
@*
@inherits
@implements
*@

@page "/"

<div class="container">
    <div class="row">
    @if (isLoading)
    {
        <div class="col-md-12">
            <p><em>Loading...</em></p>
        </div>
    }
    else
    {
        string paths = Common.GetDirParent(currentDir);
        string[] exPaths = Common.ExtractDirPath(paths);

        <div class="col-md-12" style="margin-bottom:100px;">
            <p>
                Current Directory Path : @currentDir
            </p>

            @if (exPaths != null && exPaths.Length > 0)
            {
                string currentBack = "/";
                for(int i = 0 ; i < exPaths.Length-1 ; ++i)
                {
                    currentBack = exPaths[i];
                }

                <p>
                    <a href="javascript:$;" @onclick="@(() => SetCurrentDir(currentBack))">
                        @((MarkupString)TypeToImg("DIRECTORY"))
                        ..
                    </a>
                </p>
            }

            <p style="@(isUploading ? "display:none;" : "")">
                <a href="javascript:$;" @onclick="@(async () => await Select_DeleteFile())">
                    <img src="delete-24px.svg" style="width:24px;height:24px;">
                </a>
            </p>

            <p>
                <img src="create_new_folder-24px.svg" style="width:24px;height:24px;">
                <input type="text" @bind-value="newFolderName">
                <a href="javascript:$;" @onclick="@(() => CreateNewFolder())">
                    New Folder
                </a>
            </p>
            
        @foreach(var i in listDir)
        {
            string p = i.pathSuffix;
            if(currentDir != "/")
            {
                p = "/" + p;
            }

            <p>
                <input type="checkbox" @onchange="eventArgs => { SelectFile(i, (bool)eventArgs.Value); }">

                @switch(i.type)
                {
                    case "DIRECTORY":
                    {
                        <a href="javascript:$;" @onclick="@(() => SetCurrentDir(currentDir + p))">
                            @((MarkupString)TypeToImg(i.type))
                            @i.pathSuffix
                        </a>
                    }
                    break;

                    default:
                    {
                        @((MarkupString)TypeToImg(i.type))
                        <span>
                            @i.pathSuffix
                        </span>
                    }
                    break;
                }

                <a href="javascript:$;" @onclick="@(() => DeletePath(currentDir + p))">
                    <img src="delete-24px.svg" style="width:24px;height:24px;">
                </a>
            </p>
        }


        <h4>Upload</h4>

        AutoUpload : <input type="checkbox" @onchange="OnAutoUploadChange" disabled="@isUploading">
        @if (isUploading)
        {
            <p>@status</p>
        }
        <hr>
        <button @onclick="@SubmitUpload" disabled="@isBtnUploadDisable" style="@(isAutoUpload ? "display:none;" : "")">Upload</button>

        <div class="drag-drop-zone" style="@(isUploading ? "display:none;" : "")">
            <p>Drag & Drop file here</p>
            <input multiple type="file" @ref="inputTypeFileElement" @onchange="InputFileChange" disabled="@isUploading" />
        </div>

        @if(allFiles != null)
        {
            foreach(var file in allFiles)
            {
                <div class="border border-secondary p-3">
                    <p>Name: @file.fileInfo.Name</p>
                    <p>Size in bytes: @file.fileInfo.Size</p>
                    <p>Last modified date: @file.fileInfo.LastModified</p>
                    <p>Content type: @file.fileInfo.Type</p>
                    <button @onclick="@((e) => DeleteFile(file))" disabled="@isUploading" style="@(isUploading ? "display:none;" : "")">Delete</button>
                </div>
            }
        }


        </div>
    }
    </div>
</div>

@code {
    ElementReference inputTypeFileElement;

    List<HDFSResponse.FileStatus> listDir = new List<HDFSResponse.FileStatus>();
    string currentDir = "/";
    string newFolderName = "";
    bool isLoading = false;

    bool isBtnUploadDisable
    {
        get
        {
            return isUploading || allFiles == null ||  (allFiles != null && allFiles.Length == 0);
        }
    }

    string hadoopURL;
    int hadoopRetryUpload;
    List<KeyValuePair<string, string>> urlSwitch;

    FileUpload[] allFiles;
    string status = "";
    bool isUploading = false;
    bool isAutoUpload = false;

    class FileUpload
    {
        public IFileReference fileReference;
        public IFileInfo fileInfo;
    }
    
    List<HDFSResponse.FileStatus> fileSelect = new List<HDFSResponse.FileStatus>();

    protected override async Task OnInitializedAsync()
    {
        hadoopURL = Configuration["Hadoop:URL"].ToString();
        hadoopRetryUpload = Convert.ToInt32(Configuration["Hadoop:RETRYUPLOAD"]);
        urlSwitch = new List<KeyValuePair<string, string>>();
        List<KeyValuePair<string, string>> ConfigURLSwitchFind = Configuration.GetSection("Hadoop:URL_SWITCH:FIND").AsEnumerable().ToList();
        List<KeyValuePair<string, string>> ConfigURLSwitchReplace = Configuration.GetSection("Hadoop:URL_SWITCH:REPLACE").AsEnumerable().ToList();
        if (ConfigURLSwitchFind.Count != ConfigURLSwitchReplace.Count) Console.WriteLine("size error of ConfigURLSwitchFind != ConfigURLSwitchReplace");
        else
            for(int ind = 0 ; ind < ConfigURLSwitchFind.Count(); ++ind)
            {
                var find = ConfigURLSwitchFind[ind];
                var replace = ConfigURLSwitchReplace[ind];
                if (find.Value == null || replace.Value == null
                    || find.Value == string.Empty || replace.Value == string.Empty)
                    continue;

                //Console.WriteLine($"replace {find.Value} > {replace.Value}");

                urlSwitch.Add(new KeyValuePair<string, string>(find.Value, replace.Value));
            }

        await LoadCurrentDir();
    }

    void SelectFile(HDFSResponse.FileStatus file, bool value)
    {
        if (value)
        {
            fileSelect.Add(file);
        }
        else
        {
            fileSelect.Remove(file);
        }

        //Console.WriteLine(fileSelect.Count);
    }

    async Task Select_DeleteFile()
    {
        HDFSResponse.FileStatus[] files = fileSelect
                                                    //.Where(x => x.check).Select(x => x.fileStatus)
                                                    .ToArray()
                                                    ;
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure to file count {files.Length}?");
        if (confirmed)
        {
            fileSelect.Clear();
            
            foreach(var i in files)
            {
                string p = i.pathSuffix;
                if(currentDir != "/")
                {
                    p = "/" + p;
                }

                bool delete = await HadoopAPI.DeleteFile(hadoopURL, currentDir + p);
                if(delete)
                {
                    listDir.Remove(i);
                    StateHasChanged();
                }
            }
        }

        await LoadCurrentDir();
    }

    async Task InputFileChange(ChangeEventArgs e)
    {
        List<FileUpload> list = new List<FileUpload>();

        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();

            list.Add(new FileUpload(){ fileInfo = fileInfo, fileReference = file, });
        }
        
        allFiles = list.ToArray();
        StateHasChanged();

        if(isAutoUpload)
        {
            await SubmitUpload();
        }
    }

    void DeleteFile(FileUpload file)
    {
        if(allFiles != null && allFiles.Length > 0)
        {
            List<FileUpload> listFiles = new List<FileUpload>();
            listFiles.AddRange(allFiles);
            listFiles.Remove(file);

            allFiles = listFiles.ToArray();
            
            StateHasChanged();
        }
    }

    void OnAutoUploadChange(ChangeEventArgs e)
    {
        isAutoUpload = (bool)e.Value;
        allFiles = null;
        StateHasChanged();
    }

    async Task SubmitUpload()
    {
        if (allFiles != null)
        {
            isUploading = true;

            foreach(var file in allFiles.ToArray())
            {
                using (Stream stream = await file.fileReference.OpenReadAsync())
                {
                    string filePathTemp = System.IO.Path.GetTempFileName();
                    //Console.WriteLine("filePathTemp : " + filePathTemp);

                    using(var fileStream = File.OpenWrite(filePathTemp))
                    {
                        await stream.CopyToAsyncWithCallback(fileStream, (long pos) => {
                            status = $"Progress {pos}/{stream.Length} bytes from {file.fileInfo.Name}";
                            StateHasChanged();
                        });
                    }

                    string p = GetCurrentPath(file.fileInfo.Name);
                    if (p != null && p.Length > 0 && p[0] == '/')
                    {
                        p = p.Remove(0, 1);
                    }

                    bool fileExists = listDir.Exists(x => x.pathSuffix == Path.GetFileName(p));
                    if (fileExists) p += "_";

                    //Console.WriteLine("PATH : " + p);
                    byte[] fileBuffer = System.IO.File.ReadAllBytes(filePathTemp);
                    bool upload = await HadoopAPI.UploadFile(hadoopURL, p, urlSwitch, fileBuffer);
                    if (upload)
                    {
                        //Console.WriteLine("upload : " + upload);

                        HDFSResponse.FileGetStatus fs = await HadoopAPI.FileStatus(hadoopURL, p);
                        if (fs != null)
                        {
                            fs.fileStatus.pathSuffix = Path.GetFileName(p);
                            //Console.WriteLine("fs : " + JsonConvert.SerializeObject(fs.fileStatus));
                            listDir.Add(fs.fileStatus);
                            //fileSelect.Add(new FileCheck(){ fileStatus = fs.fileStatus, check = false, });
                        }
                    }

                    File.Delete(filePathTemp);

                    //status = $"Finished loading {file.Size} bytes from {file.Name}";
                    DeleteFile(file);

                    StateHasChanged();
                }
            }
        }

        isUploading = false;
        allFiles = null;
        StateHasChanged();
    }

    string GetCurrentPath(string dir)
    {
        if(currentDir == "/") return currentDir + dir;
        return currentDir + "/" + dir;
    }

    async Task CreateNewFolder()
    {
        if(newFolderName != "")
        {
            string p = GetCurrentPath(newFolderName);
            if (p != null && p.Length > 0 && p[0] == '/')
            {
                p = p.Remove(0, 1);
            }

            //await JSRuntime.InvokeAsync<bool>("alert", GetCurrentPath(newFolderName));
            bool create = await HadoopAPI.CreateFile(hadoopURL, p);
            if (create)
            {
                await LoadCurrentDir();
            }
            newFolderName = "";
            StateHasChanged();
        }
    }

    async Task DeletePath(string path)
    {
        string p = path;
        if (p != null && p.Length > 0 && p[0] == '/')
        {
            p = p.Remove(0, 1);
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure to delete {p}?");
        if (confirmed)
        {
            

            //foreach(var i in listDir)
            //{
            //    await JSRuntime.InvokeAsync<bool>("alert", GetCurrentPath(i.pathSuffix) + " == " + path);
            //}

            //call hadoop
            bool delete = await HadoopAPI.DeleteFile(hadoopURL, path);
            if(delete)
            {
                listDir.RemoveAll(x => GetCurrentPath(x.pathSuffix) == path);

                StateHasChanged();
                await LoadCurrentDir();
            }
        }
    }

    async Task LoadCurrentDir()
    {
        isLoading = true;
        listDir.Clear();
        StateHasChanged();

        List<HDFSResponse.FileStatus> dirs = new List<HDFSResponse.FileStatus>()
                                    , ff = new List<HDFSResponse.FileStatus>();
        HDFSResponse.FileStatus[] files = await HadoopAPI.GetFileList(hadoopURL, currentDir);
        if (files != null && files.Length > 0)
        {
            foreach(var i in files)
            {
                if (i.type == "DIRECTORY") dirs.Add(i);
                else ff.Add(i);
            }
        }
        
        if(dirs.Count > 0) listDir.AddRange(dirs);
        if(ff.Count > 0) listDir.AddRange(ff);

        fileSelect.Clear();
        listDir.ForEach(x => {
            //fileSelect.Add(new FileCheck(){ fileStatus = x, check = false, });
        });

        isLoading = false;
        StateHasChanged();
    }

    async Task SetCurrentDir(string dir)
    {
        if (isUploading == false)
        {
            currentDir = dir;
            StateHasChanged();

            await LoadCurrentDir();
        }
    }

    string TypeToImg(string type)
    {
        switch(type)
        {
            case "FILE":
                return "<img src=\"insert_drive_file-24px.svg\" style=\"width:24px;height:24px;\">";
            
            case "DIRECTORY":
                return "<img src=\"folder-24px.svg\" style=\"width:24px;height:24px;\">";
        }

        return type;
    }
}
